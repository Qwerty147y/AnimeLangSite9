// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
let currentAnime = null;
let currentEpisode = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    loadAnimes();
    handleInitialLoad();
    initializeSearch();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
function initializeSearch() {
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    
    searchInput.addEventListener('input', (e) => {
        const query = e.target.value.trim().toLowerCase();
        
        if (query === '') {
            searchResults.style.display = 'none';
            return;
        }
        
        const filteredAnime = animeData.filter(anime => 
            anime.title.toLowerCase().includes(query)
        );
        
        if (filteredAnime.length > 0) {
            searchResults.innerHTML = filteredAnime.map(anime => `
                <div class="search-result-item" onclick="showAnimeDetail('${anime.id}'); hideSearchResults();">
                    <div class="search-result-title">${anime.title}</div>
                    <div class="search-result-meta">${anime.genre || '–ê–Ω–∏–º–µ'} ‚Ä¢ ${anime.episodes ? anime.episodes.length : 0} —Å–µ—Ä–∏–π ‚Ä¢ ${anime.movies ? anime.movies.length : 0} —Ñ–∏–ª—å–º–æ–≤</div>
                </div>
            `).join('');
            searchResults.style.display = 'block';
        } else {
            searchResults.innerHTML = '<div class="search-result-item">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
            searchResults.style.display = 'block';
        }
    });
    
    // –°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–∏—Å–∫–∞
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.search-container')) {
            searchResults.style.display = 'none';
        }
    });
}

// –°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
function hideSearchResults() {
    document.getElementById('search-results').style.display = 'none';
    document.getElementById('search-input').value = '';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∏–º–µ
function loadAnimes() {
    const grid = document.getElementById('anime-grid');
    
    if (!animeData || animeData.length === 0) {
        grid.innerHTML = '<div class="loading">–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }

    const gridHTML = `
        <div class="grid">
            ${animeData.map(anime => `
                <div class="anime-card" onclick="showAnimeDetail('${anime.id}')">
                    <div class="anime-banner">
                        <img src="${anime.bannerUrl}" alt="${anime.title}" loading="lazy">
                        <div class="anime-overlay">
                            <h3 class="anime-title">${anime.title}</h3>
                        </div>
                    </div>
                </div>
            `).join('')}
        </div>
    `;

    grid.innerHTML = gridHTML;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
function showHome() {
    document.body.classList.remove('episode-playing');
    stopAllVideos();
    showPage('home-page');
    history.pushState(null, null, '/');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–Ω–∏–º–µ
function showAnimeDetail(animeId) {
    document.body.classList.remove('episode-playing');
    
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ
    stopAllVideos();
    
    const anime = animeData.find(a => a.id === animeId);
    if (!anime) return;

    currentAnime = anime;
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–Ω–Ω–µ—Ä –∞–Ω–∏–º–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    const container = document.getElementById('anime-detail-container');
    container.innerHTML = `
        <div class="anime-hero">
            <div class="anime-hero-bg">
                <img src="${anime.heroImage || anime.bannerUrl}" alt="${anime.title}">
                <div class="anime-hero-overlay"></div>
            </div>
            <div class="anime-hero-content">
                <div class="anime-info">
                    <h1 class="anime-hero-title">${anime.title}</h1>
                    <div class="anime-meta">
                        <span class="anime-seasons">${anime.seasons || 1} —Å–µ–∑–æ–Ω</span>
                        <span class="anime-episodes">${anime.episodes ? anime.episodes.length : 0} —Å–µ—Ä–∏–π</span>
                        <span class="anime-movies">${anime.movies ? anime.movies.length : 0} —Ñ–∏–ª—å–º–æ–≤</span>
                        <span class="anime-genre">${anime.genre || '–ê–Ω–∏–º–µ'}</span>
                    </div>
                    <p class="anime-description">${anime.description || '–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –∞–Ω–∏–º–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –æ—Å—Ç–∞–≤–∏—Ç –≤–∞—Å —Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã–º–∏.'}</p>
                </div>
            </div>
        </div>
        
        ${anime.episodes && anime.episodes.length > 0 ? `
            <div class="episodes-container">
                <h2 class="section-title">–°–µ—Ä–∏–∏</h2>
                <div class="episodes-list">
                    ${anime.episodes.map(episode => `
                        <div class="episode-item" onclick="showEpisode('${anime.id}', ${episode.number}, 'episode')">
                            <div class="episode-number">${episode.number}</div>
                            <div class="episode-info">
                                <h4>–°–µ—Ä–∏—è ${episode.number}</h4>
                                <p>${episode.title || `–°–µ—Ä–∏—è ${episode.number}`}</p>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        ` : ''}
        
        ${anime.movies && anime.movies.length > 0 ? `
            <div class="movies-container">
                <h2 class="section-title">–§–∏–ª—å–º—ã</h2>
                <div class="episodes-list">
                    ${anime.movies.map(movie => `
                        <div class="episode-item" onclick="showEpisode('${anime.id}', ${movie.number}, 'movie')">
                            <div class="episode-number">üé¨</div>
                            <div class="episode-info">
                                <h4>${movie.title}</h4>
                                <p>–§–∏–ª—å–º ${movie.number}</p>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
        ` : ''}
    `;

    showPage('anime-detail-page');
    // –£–±–∏—Ä–∞–µ–º # –∏–∑ URL
    history.pushState(null, null, `anime/${animeId}`);
}

// –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∞–Ω–∏–º–µ
function backToAnime() {
    if (currentAnime) {
        showAnimeDetail(currentAnime.id);
    } else {
        showHome();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏—é
function showEpisode(animeId, episodeNumber, type = 'episode') {
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ
    stopAllVideos();
    
    const anime = animeData.find(a => a.id === animeId);
    const episode = type === 'movie' 
        ? anime?.movies?.find(e => e.number === episodeNumber)
        : anime?.episodes?.find(e => e.number === episodeNumber);
    
    if (!anime || !episode) return;

    currentAnime = anime;
    currentEpisode = episode;
    
    // –°–∫—Ä—ã—Ç—å —Ö–µ–¥–µ—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–µ—Ä–∏–π
    document.body.classList.add('episode-playing');
    
    // –°–æ–∑–¥–∞—Ç—å iframe –ø–ª–µ–µ—Ä
    const container = document.getElementById('video-container');
    container.innerHTML = `
        <iframe 
            src="${episode.videoUrl}" 
            frameborder="0" 
            allowfullscreen
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            class="video-iframe"
            id="current-video">
        </iframe>
    `;
    
    // –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    const iframe = container.querySelector('iframe');
    iframe.addEventListener('load', () => {
        // –ê–≤—Ç–æ–ø–æ–≤–æ—Ä–æ—Ç –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        if (window.innerWidth <= 768) {
            iframe.addEventListener('fullscreenchange', () => {
                if (document.fullscreenElement) {
                    screen.orientation?.lock?.('landscape');
                }
            });
        }
    });
    
    // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    updateEpisodeNavigation(type);
    
    showPage('episode-page');
    // –£–±–∏—Ä–∞–µ–º # –∏–∑ URL
    const urlType = type === 'movie' ? 'movie' : 'episode';
    history.pushState(null, null, `anime/${animeId}/${urlType}/${episodeNumber}`);
}

// –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å–µ—Ä–∏–π
function updateEpisodeNavigation(type = 'episode') {
    if (!currentAnime || !currentEpisode) return;
    
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const counter = document.getElementById('episode-counter');
    
    const currentNumber = currentEpisode.number;
    const totalEpisodes = type === 'movie' 
        ? (currentAnime.movies?.length || 0)
        : (currentAnime.episodes?.length || 0);
    
    // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
    const label = type === 'movie' ? '–§–∏–ª—å–º' : '–°–µ—Ä–∏—è';
    counter.textContent = `${label} ${currentNumber} / ${totalEpisodes}`;
    
    // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
    prevBtn.disabled = currentNumber === 1;
    nextBtn.disabled = currentNumber === totalEpisodes;
}

// –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Ä–∏—è
function goToPreviousEpisode() {
    if (!currentAnime || !currentEpisode) return;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø
    const isCurrentMovie = currentAnime.movies?.find(m => m.number === currentEpisode.number);
    
    if (isCurrentMovie) {
        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–ª—å–º, –∏—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∏–ª—å–º –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Ä–∏—é
        if (currentEpisode.number > 1) {
            const prevMovie = currentAnime.movies?.find(m => m.number === currentEpisode.number - 1);
            if (prevMovie) {
                showEpisode(currentAnime.id, currentEpisode.number - 1, 'movie');
            }
        } else if (currentAnime.episodes && currentAnime.episodes.length > 0) {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Ä–∏–∏
            showEpisode(currentAnime.id, currentAnime.episodes.length, 'episode');
        }
    } else {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–∏—è
        if (currentEpisode.number > 1) {
            showEpisode(currentAnime.id, currentEpisode.number - 1, 'episode');
        }
    }
}

// –°–ª–µ–¥—É—é—â–∞—è —Å–µ—Ä–∏—è
function goToNextEpisode() {
    if (!currentAnime || !currentEpisode) return;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø
    const isCurrentMovie = currentAnime.movies?.find(m => m.number === currentEpisode.number);
    
    if (isCurrentMovie) {
        // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–ª—å–º, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å–º
        const nextMovie = currentAnime.movies?.find(m => m.number === currentEpisode.number + 1);
        if (nextMovie) {
            showEpisode(currentAnime.id, currentEpisode.number + 1, 'movie');
        }
    } else {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–∏—è
        const totalEpisodes = currentAnime.episodes?.length || 0;
        if (currentEpisode.number < totalEpisodes) {
            showEpisode(currentAnime.id, currentEpisode.number + 1, 'episode');
        } else if (currentAnime.movies && currentAnime.movies.length > 0) {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∏–ª—å–º—É
            showEpisode(currentAnime.id, 1, 'movie');
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
function showContacts() {
    document.body.classList.remove('episode-playing');
    stopAllVideos();
    showPage('contacts-page');
    history.pushState(null, null, 'contacts');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
function showSupport() {
    document.body.classList.remove('episode-playing');
    stopAllVideos();
    showPage('support-page');
    history.pushState(null, null, 'support');
}

// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ
function stopAllVideos() {
    const currentVideo = document.getElementById('current-video');
    if (currentVideo) {
        // –ó–∞–º–µ–Ω—è–µ–º src —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        currentVideo.src = 'about:blank';
        currentVideo.remove();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
function showPage(pageId) {
    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (pageId !== 'episode-page') {
        stopAllVideos();
    }
    
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });
    
    const targetPage = document.getElementById(pageId);
    if (targetPage) {
        targetPage.classList.add('active');
    }
    
    window.scrollTo(0, 0);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
function handleInitialLoad() {
    const hash = window.location.hash;
    if (hash) {
        handleHashChange(hash);
    }
    
    window.addEventListener('hashchange', () => {
        handleHashChange(window.location.hash);
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è hash
function handleHashChange(path) {
    // –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
    const cleanPath = path.replace('#', '');
    
    if (cleanPath.startsWith('anime/')) {
        const parts = cleanPath.split('/');
        const animeId = parts[1];
        const type = parts[2]; // 'episode' –∏–ª–∏ 'movie'
        const episodeNumber = parts[3];
        
        if (episodeNumber) {
            showEpisode(animeId, parseInt(episodeNumber), type);
        } else {
            showAnimeDetail(animeId);
        }
    } else if (cleanPath === 'support') {
        showSupport();
    } else if (cleanPath === 'contacts') {
        showContacts();
    } else {
        showHome();
    }
}